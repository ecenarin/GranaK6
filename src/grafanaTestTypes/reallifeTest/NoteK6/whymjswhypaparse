CRUD işlemlerini ve yük testi betiklerini farklı ortamlarda çalıştırmak için bazı önemli noktaları açıklayayım.

### PapaParse ve Axios Kullanımı

#### Axios
`axios`, HTTP isteklerini yapmak için kullanılan popüler bir JavaScript kütüphanesidir. Bu kütüphaneyi kullanarak InfluxDB API'sine veri yazma (POST), veri okuma (GET) ve güncelleme (PUT) işlemlerini yapabilirsiniz.

#### PapaParse
`PapaParse`, CSV verilerini ayrıştırmak ve JSON formatına dönüştürmek için kullanılan bir JavaScript kütüphanesidir. Sorgu sonuçları CSV formatında döndüğü için, bu sonuçları daha okunabilir bir formata dönüştürmek için bu kütüphaneyi kullanıyoruz.

### Neden `.mjs` Uzantısı Kullanılır?
Node.js'de `.mjs` uzantısı, ES module standardına göre yazılmış JavaScript dosyalarını belirtir. ES module, modern JavaScript uygulamalarında modülerlik sağlar ve `import/export` sözdizimini kullanmanıza olanak tanır. Node.js'de varsayılan olarak CommonJS modül sistemi (`require`) kullanılır, ancak `.mjs` uzantısıyla ES module sistemine geçebilirsiniz.

### Neden `node` Komutu Kullanılır?
`node` komutu, Node.js runtime ortamını kullanarak JavaScript dosyalarını çalıştırır. Node.js, sunucu tarafında JavaScript çalıştırmak için kullanılan bir platformdur. Bu nedenle, betikleri terminal üzerinden çalıştırmak için `node` komutunu kullanıyoruz.

### Yük Testi İçin k6 Kullanımı

CRUD işlemlerini yük testi yapmak için k6 kullanıyoruz. k6, Go dilinde yazılmış açık kaynaklı bir yük testi aracıdır ve JavaScript kullanarak test senaryoları yazmanıza olanak tanır. k6, Node.js ile değil kendi runtime ortamı ile çalışır, bu nedenle betikleri `k6 run` komutuyla çalıştırıyoruz.

### Özet Betikler ve Kullanım

#### Yük Testi Betiği (CRUD İşlemleri)

Bu betik, CRUD işlemlerini yük testi yapmak için k6 kullanarak yazılmıştır.

```javascript
import http from 'k6/http';
import { check, sleep } from 'k6';

export let options = {
    stages: [
        { duration: '1m', target: 50 }, // ramp up to 50 users
        { duration: '5m', target: 50 }, // stay at 50 users for 5 minutes
        { duration: '1m', target: 0 },  // ramp down to 0 users
    ],
    thresholds: {
        'http_req_duration': ['p(95)<500'], // 95% of requests should be below 500ms
        'http_req_failed': ['rate<0.01'],    // error rate should be less than 1%
    },
};

const BASE_URL = 'http://localhost:8086';
const token = "111bXgIP74Qc1tLUtTD1hCUioR93vbSRf20O342w-hMc1Fm76kyI5n41Qk_p1YYGKWDEfVZVHQd6ybDbCf9KPA==";
const headers = {
    "Authorization": `Token ${token}`,
    "Content-Type": "application/json"
};

export default function () {
    // Create
    let createRes = http.post(`${BASE_URL}/api/v2/write?org=EceX&bucket=Ece Narin&precision=s`,
        'testMeasurement,tag1=value1 field1="value1"', { headers });
    check(createRes, {
        'Create: is status 204': (r) => r.status === 204,
    });

    // Simulate a read after creation
    sleep(1);
    let query = `from(bucket: "Ece Narin") |> range(start: -1h) |> filter(fn: (r) => r._measurement == "testMeasurement")`;
    let readRes = http.post(`${BASE_URL}/api/v2/query?org=EceX`, JSON.stringify({ query }), { headers });
    check(readRes, {
        'Read: is status 200': (r) => r.status === 200,
    });

    // Update (by writing new data)
    sleep(1);
    let updateRes = http.post(`${BASE_URL}/api/v2/write?org=EceX&bucket=Ece Narin&precision=s`,
        'testMeasurement,tag1=value1 field1="new_value"', { headers });
    check(updateRes, {
        'Update: is status 204': (r) => r.status === 204,
    });

    // Simulate a read after update
    sleep(1);
    let readUpdatedRes = http.post(`${BASE_URL}/api/v2/query?org=EceX`, JSON.stringify({ query }), { headers });
    check(readUpdatedRes, {
        'Read Updated: is status 200': (r) => r.status === 200,
    });

    // Simulate delete (there's no direct delete in InfluxDB via API)
    sleep(1);
    console.log('Delete simulation: No direct delete support in InfluxDB via API');

    sleep(1); // short sleep to prevent overwhelming the server
}
```

### Yük Testini Çalıştırma

Bu betiği `crud-load-test.js` olarak kaydedin ve terminalde şu komutu çalıştırarak betiği çalıştırın:

```bash
k6 run crud-load-test.js
```

### CRUD Betiği (Node.js ile)

Eğer Node.js ile basit CRUD işlemlerini test etmek isterseniz, aşağıdaki betiği kullanabilirsiniz. Bu betiği `.mjs` uzantısıyla kaydedin ve `node` komutuyla çalıştırın.

```javascript
import axios from 'axios';
import Papa from 'papaparse';

const token = "111bXgIP74Qc1tLUtTD1hCUioR93vbSRf20O342w-hMc1Fm76kyI5n41Qk_p1YYGKWDEfVZVHQd6ybDbCf9KPA==";
const headers = {
    "Authorization": `Token ${token}`,
    "Content-Type": "text/plain"
};

const org = "EceX";
const bucket = "Ece Narin";
const influxDBURL = "http://localhost:8086/api/v2";

// Write data (Create)
const writeData = async () => {
    const writeURL = `${influxDBURL}/write?org=${org}&bucket=${bucket}&precision=s`;
    const data = 'testMeasurement,tag1=value1 field1="value1"';

    try {
        const response = await axios.post(writeURL, data, { headers });
        console.log('Create response status:', response.status);
    } catch (error) {
        console.error('Create error:', error.response ? error.response.data : error.message);
    }
};

// Query data (Read)
const queryData = async () => {
    const queryURL = `${influxDBURL}/query?org=${org}`;
    const query = `from(bucket: "${bucket}") |> range(start: -1h) |> filter(fn: (r) => r._measurement == "testMeasurement")`;

    try {
        const response = await axios.post(queryURL, { query: query }, { headers, responseType: 'text' });
        const csvData = response.data;
        const jsonData = Papa.parse(csvData, { header: true }).data;
        console.log('Read response:', JSON.stringify(jsonData, null, 2));
        return jsonData;
    } catch (error) {
        console.error('Read error:', error.response ? error.response.data : error.message);
    }
};

// Update data (simulating by writing again with new value)
const updateData = async () => {
    const writeURL = `${influxDBURL}/write?org=${org}&bucket=${bucket}&precision=s`;
    const data = 'testMeasurement,tag1=value1 field1="new_value"';

    try {
        const response = await axios.post(writeURL, data, { headers });
        console.log('Update response status:', response.status);
    } catch (error) {
        console.error('Update error:', error.response ? error.response.data : error.message);
    }
};

// Delete data (simulating by writing a deletion marker)
const deleteData = async () => {
    // InfluxDB does not support direct deletion through the API, so this is a workaround
    // Usually, we mark data as deleted or we can use drop measurement (dangerous, drops all data)
    console.log('Delete simulation: Marking data as deleted');
};

(async () => {
    await writeData();  // Create
    await queryData();  // Read
    await updateData(); // Update
    await queryData();  // Read updated data
    await deleteData(); // Delete simulation
})();
```

### CRUD Betiğini Çalıştırma

Bu betiği `crud-test.mjs` olarak kaydedin ve terminalde şu komutu çalıştırarak betiği çalıştırın:

```bash
node crud-test.mjs
```

Bu adımları izleyerek CRUD işlemlerini hem yük testi (k6) hem de temel test (Node.js) olarak gerçekleştirebilirsiniz. Başka sorularınız olursa, her zaman buradayım Baboli!